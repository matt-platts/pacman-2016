2016 update of my Javascript Pacman game from 1999 (also on github).

See www.mattplatts.com/pacman/, or www.mattplatts.com/pacman-original for the 1999 original.

The original version was built for IE4 and Netscape 4, and was updated to support Netscape 6 in 2001, Chrome and Firefox in 2009, and I decided to look at it again in 2016 to see how it could be improved.

Improvements so far have been:

1. Generate the mazes from far simpler data - mainly 0s and 1s - and use this data to draw the maze in css as opposed to a graphic, as well as use it for the basis of game calculations. 
2. CSS animated pacman - the original gif did not play when it moved across the screen.
3. Removal of frameset (in order to store data between different levels in a hidden frame - how very 1999!), and removeal of hard coded html pages for each level, in favour of local storage and dynamic loading and rendering of maze data between levels.
4. Re-implementation of ghost algorithms. The original version had randomly moving ghosts which could only detect if you were in their direct line of sight and act accordingly. New implementation features scatter, chase and random modes which can be switched depending on various variables. They can now home in on you from afar if they so choose. I am still working on the exact timings of these modes and intend to implement some selectable options for game play. 
5. New logic allowing modifications to the speed of pacman on the fly, consequently better collision detection too. Previously there was an issue when going round corners anyway as the change in direction of pacman compared to a ghost moving towards you ended up generating collosions when it should not..
6. Delay ghosts leaving home base incrementally (as per original NAMCO game).
7. Conversion of maze junction data from 'expensive' to work with data to binary, in order to employ much leaner bitwise maths. Has meant changing direction conversion from UDLR to 1248 as well.
8. Tidying up of code and commenting (ongoing, I am getting onto those eval's which are still left). 

Future improvements will be

1. The code architecture is old and based on tweaking the original 1999 code. A proper OO architecture would be beneficial if any more logic is to go in now, modification of global variables from all over the place is getting very confusing, I'm actually surprised it's stood up so far, but this is why bugs are creeping in sometimes, it's very hard to read. Commenting has been my first part of really understanding what I need to do.
2. Spilt all the constants out into configuration/settings, more adjustments on these on various triggers as part of the gameplay in order to increase difficulty in a better way (currently it speeds up a little between levels).
3. Create your own maze feature - now everything is generated from a simple data format, it would be easy to allow people to create their own.
4. Random maze generation algorithm, based on a modification of the known recursive backtracker algorithm but to take the double walls into account (Recusrive backgracker deals with borders on all cells, not some cells blocked as walls).
5. Selections for different logic and modes of play. I've found lots of things that work interestingly. It's facinating to see how small changes change the feel of the game greatly as well.
6. Some wild and crazy features going beyond a pacman clone :)

Currently known bugs / issues / thoughts
1. Firefox testing didn't go well (Chrome and IE seemed fine)
2. Not tested in Safari, Opera or any other browser.

